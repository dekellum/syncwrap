= SyncWrap

* http://github.com/dekellum/syncwrap
* {<img src="https://travis-ci.org/dekellum/syncwrap.png" />}[https://travis-ci.org/dekellum/syncwrap]

== Description

A rather direct provisioning and deployment system in ruby, bash over
ssh, and rsync. SyncWrap is a refreshingly straightforward, DSL-free
non-framework with no central server or repository requirements. The
"magic", if any, lies in the elegant component model, the shell
command queue, and a few powerful methods like rput (augmented rsync).

== Features

* Default Thread-per-host parallel operation, with synchronized
  block/live console output for debugging.

* Multi-line shell support (often via here-document), command queue,
  and composition support in SyncWrap::Component#sh for more natural
  script embedding.  You'll know you are provisioning with bash, in
  all its syntactic glory.

* SyncWrap::Component#rput wraps rsync, with support for multiple
  source roots, transparent ERB templates, and target file
  owner/permissions control. Returns the file change status allowing
  reactive scripting (i.e. restart daemon since config has changed.)

* Linux distro differences are factored out into distro-specific
  components with utility methods exposed in host context.

* SyncWrap::AmazonEC2 provider with host profiles: create and
  provision hosts in a single step.

* Independent of (but easily integrated into) rake

* Depends only on ruby 1.9+ stdlib Open3 for interaction with bash,
  ssh and rsync. Actually, really works on jruby 1.6.8 (--1.9 mode)
  and 1.7+

== Synopsis

Simplest example. Place the following in a sync.rb file:

  class Greeter < SyncWrap::Component
    def install
      say_it
    end

    def say_it
      sh <<-SH
        echo "Hello from #{host.name}"
      SH
    end
  end

  host 'localhost', Greeter.new

Try it via the command line:

  gem install syncwrap
  syncwrap --help
  syncwrap -f ./sync.rb --list  # -f default; list
  syncwrap                      # Run it
  syncwrap -v                   # Run it with full verbose output
  syncwrap -v Greeter.say_it    # Without Greeter#install default

Output from syncwrap -v (minus the terminal color):

  == localhost #<Module:0x00000001e95678>::Greeter#install: enqueue
  <-- sh localhost (-v coalesce live)
  echo "Hello from localhost"
  Hello from localhost
  --> Exit 0 (success)

See more elaborate examples, including ec2 provider support, in the
examples directory and LAYOUT.

== Components

Components implementing SyncWrap::Distro, to expose common utility
methods like dist_install:

* SyncWrap::RHEL (also supports CentOS, Amazon Linux)
* SyncWrap::Ubuntu

Components implementing \#install:

* SyncWrap::MDRaid - Software raid, lvm volumes, filesystems, mounts

* SyncWrap::Network and SyncWrap::EtcHosts - hostname, static names,
  resolver config

* SyncWrap::Users - developer accounts, home directory files (incl. ssh
  keys), sudoers access

* SyncWrap::RunUser - a user for running deployed daemons, jobs, in
  var directories.

* SyncWrap::PostgreSQL

* SyncWrap::OpenJDK or SyncWrap::CommercialJDK

* SyncWrap::JRubyVM and/or SyncWrap::CRubyVM (MRI, from source)

* SyncWrap::Iyyov - job scheduler and process monitor with
  utilities for SyncWrap::IyyovDaemon deployment.

* SyncWrap::Geminabox - private gem server

* SyncWrap::Qpid - AMQP broker

=== Component wish list

The above only represents my more recent project needs. Pull requests
to add, for example, the following would be well received:

* Bundler install, for example for Sinatra apps
* Bluepill
* Rails (extra credit: without git fetch or per-host asset compile)
* Nginx
* Mongo
* Redis

\SyncWrap makes it reasonable to implement any of the above in the
privacy of your own office.

== License

Copyright (c) 2011-2014 David Kellum

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at:

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied.  See the License for the specific language governing
permissions and limitations under the License.
